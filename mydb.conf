input {
  stdin{}
    # also optional as json
    # with an input plugin:
    # you can also use this codec with an output.
    #file { 
    #  codec =>   json {
    #   charset => ... # string, one of ["ASCII-8BIT", "UTF-8", "US-ASCII", "Big5", "Big5-HKSCS"
    #}
    #}
}
filter {
  csv {
  # for newer data.  ##columns => [gameid,qtr,min,sec,off,def,down,togo,ydline,scorediff,series1stdn,description,scorechange,nextscore,teamwin,offscore,defscore,season]
  columns => [gameid,qtr,min,sec,off,def,down,togo,ydline,description,offscore,defscore,season]
  }
  #In case the default charset is UTF-8 and the incoming message contained a character not in the UTF-8 set(non-breaking space), drop the line.
  if [description] =~ /xA0/ { drop {} }
  grok {
    match => {
      "gameid" => "%{YEAR:year}%{MONTHNUM:month}%{MONTHDAY:day}_%{GREEDYDATA:teams}"
    }
  }
  grok {
    match => {
      "teams" => "%{WORD:away}@%{WORD:home}"
    }
  }
  mutate {
    gsub => [
      "teams", "@", " at "
    ]
  }
  # now we need to convert known types from Strings to their actual type
  mutate {
    convert => {
      "qtr" => "integer"
      "min" => "integer"
      "sec" => "integer"
      "down" => "integer"
      "togo" => "integer"
      "ydline" => "integer"
      "scorediff" => "integer"
      "scorechange" => "integer"
      "nextscore" => "integer"
      "teamwin" => "integer"
      "offscore" => "integer"
      "defscore" => "integer"
      "season" => "integer"
      "month" => "string"
      "day" => "string"
      "year" => "integer"
    }
  }
  mutate {
    add_field => { "game_date" => "%{year}%{month}%{day}" }
  }
  date { match => [ "game_date", "YYYYMMdd" ]}
  grok {
    match => {
#      "description" => "\(%{DATA:clock_time}\)%{SPACE}(?:\(%{DATA:special_info}\))*%{SPACE}%{GREEDYDATA:playcall}"
      "description" => "(?:\(%{DATA:clock_time}\))*%{SPACE}*(?:\(%{DATA:special_info}\))*%{SPACE}%{GREEDYDATA:playcall}"
    }
  }
  grok {
    match => {
      "playcall" => "%{WORD:first_init}.%{WORD:last_nm}"
    }
    add_field => { "player" => "%{first_init}.%{last_nm}" }
  }
  if [playcall] =~ /No Play/ {
    mutate { add_field => { "playtype" => "noplay" } }
  }
  if [playcall] =~ / punts / {
    mutate { add_field => { "playtype" => "punt" } }
  }
  if [playcall] =~ / kicks / {
    mutate { add_field => { "playtype" => "kickoff" } }
  }
  if [playcall] =~ / field goal / {
    mutate { add_field => { "playtype" => "fieldgoal" } }
  }
  if [playcall] =~ / sacked / {
    mutate { add_field => { "playtype" => "sack" } }
  }
  if [playcall] =~ / kneels / {
    mutate { add_field => { "playtype" => "kneel" } }
  }
  if [playcall] =~ / spiked / {
    mutate { add_field => { "playtype" => "spike" } }
  }
  if [playcall] =~ / false start / {
    mutate { add_field => { "playtype" => "penalty" } }
  }
  if [playcall] =~ / extra point / {
    mutate { add_field => { "playtype" => "extrapoint" } }
  }
  if [playcall] =~ / pass / {
    mutate { add_field => { "playtype" => "pass" } }
    if [playcall] =~ /left/ { mutate { add_field => { "play_loc" => "left" } } }
    if [playcall] =~ /middle/ { mutate { add_field => { "play_loc" => "middle" } } }
    if [playcall] =~ /right/ { mutate { add_field => { "play_loc" => "right" } } }
    if [playcall] =~ /short/ { mutate { add_field => { "pass_depth" => "short" } } }
    if [playcall] =~ /deep/ { mutate { add_field => { "pass_depth" => "deep" } } }
    if [playcall] =~ /incomplete/ {
      mutate { add_field => { "pass_result" => "incomplete" } }
    } else {
      mutate { add_field => { "pass_result" => "complete" } }
    }
  }
  # left guard right guard left tackle right tackle up the middle
  if [playcall] =~ /rushed/ or [playcall] =~ /up the middle/ or [playcall] =~ /left guard/ or [playcall] =~ /right guard/ or [playcall] =~ /left tackle/ or [playcall] =~ /right tackle/ or [playcall] =~ /left end/ or [playcall] =~ /right end/{
    if [playcall] =~ /scrambles/ {
      mutate { add_field => { "playtype" => "scramble" } }
    } else {
      mutate { add_field => { "playtype" => "run" } }
    }
    if [playcall] =~ /left/ { mutate { add_field => { "play_loc" => "left" } } }
    if [playcall] =~ /middle/ { mutate { add_field => { "play_loc" => "middle" } } }
    if [playcall] =~ /right/ { mutate { add_field => { "play_loc" => "right" } } }
  }
  if [playcall] =~ /PENALTY/ or [playcall] =~ /Penalty/ or [playcall] =~ /penalty/ {
    mutate { add_field => { "penalty" => true } }
  } else {
    mutate { add_field => { "penalty" => false } }
  }
  if [playcall] =~ /FUMBLES/ and [playcall] =~ /Aborted/ {
    mutate { add_field => { "playtype" => "aborted" } }
  }
  if [playcall] =~ /FUMBLES/ {
    mutate { add_field => { "fumble" => true } }
  } else {
    mutate { add_field => { "fumble" => false } }
  }
  #cleanup mutator
  mutate {
    remove_field => [message, gameid, host, path]
  }
}
output {
  stdout {
    # show progress dots......
    codec => dots
  }
  elasticsearch {
    protocol => http
    host => "localhost"
    index => "mygames"
  }
}
